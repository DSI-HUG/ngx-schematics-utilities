"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[722],{9535:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var t=i(1085),a=i(1184);const o={title:"Usage"},s=void 0,r={id:"usage",title:"Usage",description:"Each api rules can be used in a chainable or individual way.",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/ngx-schematics-utilities/usage",draft:!1,unlisted:!1,editUrl:"https://github.com/dsi-hug/ngx-schematics-utilities/edit/main/docs/docs/usage.md",tags:[],version:"current",frontMatter:{title:"Usage"},sidebar:"docs",previous:{title:"Installation",permalink:"/ngx-schematics-utilities/"},next:{title:"Core",permalink:"/ngx-schematics-utilities/apis/core"}},c={},l=[{value:"Chainable usage",id:"chainable-usage",level:3},{value:"<code>Workspace</code>",id:"workspace",level:4},{value:"<code>Application</code>",id:"application",level:4},{value:"<code>Library</code>",id:"library",level:4},{value:"Individual usage",id:"individual-usage",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Each api rules can be used in a ",(0,t.jsx)(n.a,{href:"#chainable-usage",children:(0,t.jsx)(n.strong,{children:"chainable"})})," or ",(0,t.jsx)(n.a,{href:"#individual-usage",children:(0,t.jsx)(n.strong,{children:"individual"})})," way."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["Currently, ",(0,t.jsx)(n.code,{children:"ng add"})," does not provide a way to choose which project you want a schematic to be used on.",(0,t.jsx)("br",{}),"\nTo provide such an option you will have to declare the following ",(0,t.jsx)(n.code,{children:"project"})," property, inside your ",(0,t.jsx)(n.code,{children:"schema.json"})," file:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"project": {\n  "type": "string",\n  "description": "The name of the project.",\n  "$default": {\n    "$source": "projectName"\n  }\n}\n'})}),(0,t.jsxs)(n.p,{children:["Users will then be able to provide a ",(0,t.jsx)(n.code,{children:"project"})," along your schematic installation:",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.em,{children:"(and if they do not, the default provider will populate the project option based on the inferred project from the cwd)"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"ng add YourSchematic --project ProjectName\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"chainable-usage",children:"Chainable usage"}),"\n",(0,t.jsx)(n.h4,{id:"workspace",children:(0,t.jsx)(n.code,{children:"Workspace"})}),"\n",(0,t.jsxs)(n.p,{children:["Allow you to act at the ",(0,t.jsx)(n.em,{children:"workspace"})," level."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6-10}",children:"import { schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    workspace()\n      .spawn('ng', ['add', '@angular/material', '--skip-confirmation'])\n      .addPackageJsonDevDependencies(['eslint'])\n      .packageInstallTask()\n      .toRule()\n  ], options);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"application",children:(0,t.jsx)(n.code,{children:"Application"})}),"\n",(0,t.jsxs)(n.p,{children:["Allow you to act at a ",(0,t.jsx)(n.em,{children:"project"})," level and make sure the specified project is an ",(0,t.jsx)(n.em,{children:"application"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"__SRC__"})," will be interpolated with the project ",(0,t.jsx)(n.strong,{children:"sourceRoot"})," specified in the ",(0,t.jsx)(n.strong,{children:"angular.json"})," file."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6-14}",children:"import { application, ChainableApplicationContext, createOrUpdateFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    application(options.project)\n      .addImportToFile('__SRC__/main.ts', 'environment', './environments/environment')\n      .rule(({ project }: ChainableApplicationContext) => {\n        return createOrUpdateFile(project.pathFromRoot('README.md'), project.name);\n      })\n      .isAngularVersion('<= 11', () => {\n        ...\n      })\n      .toRule()\n  ], options);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"library",children:(0,t.jsx)(n.code,{children:"Library"})}),"\n",(0,t.jsxs)(n.p,{children:["Allow you to act at a ",(0,t.jsx)(n.em,{children:"project"})," level and make sure the specified project is a ",(0,t.jsx)(n.em,{children:"library"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"__SRC__"})," will be interpolated with the project ",(0,t.jsx)(n.strong,{children:"sourceRoot"})," specified in the ",(0,t.jsx)(n.strong,{children:"angular.json"})," file."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6-8}",children:"import { library, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    library(options.project)\n      .downloadFile('https://my-cdn.com/icons/iconx.png', '__SRC__/assets/icons/icon.png')\n      .toRule()\n  ], options);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"individual-usage",children:"Individual usage"}),"\n",(0,t.jsx)(n.admonition,{title:"Caution",type:"caution",children:(0,t.jsxs)(n.p,{children:["When used this way all the paths will be relative to the root of the workspace.",(0,t.jsx)("br",{}),"\nYou will have to make sure any modifications on a project are made in a generic way.",(0,t.jsx)("br",{}),"\nTo help you with that, the ",(0,t.jsx)(n.a,{href:"/apis/angular#getprojectfromworkspace",children:"getProjectFromWorkspace()"})," helper is a good start."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,8,10,12-14,16-17}",children:"import { addImportToFile, addPackageJsonDevDependencies, getProjectFromWorkspace, modifyJsonFile, packageInstallTask, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule, Tree } from '@angular-devkit/schematics';\n\nexport default async (options: any): Rule => {\n  async (tree: Tree): Promise<Rule> => {\n    const project = await getProjectFromWorkspace(tree, options.project);\n    return schematic('my-schematic', [\n      modifyJsonFile('tsconfig.json', ['compilerOptions', 'strict'], true),\n\n      addImportToFile(project.pathFromSourceRoot('main.ts'), 'environment', './environments/environment'),\n\n      (tree, context): Rule => {\n        ...\n      },\n\n      addPackageJsonDevDependencies(['eslint']),\n      packageInstallTask()\n    ], options);\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1184:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(4041);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);