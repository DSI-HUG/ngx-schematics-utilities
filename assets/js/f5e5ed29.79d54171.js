"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[337],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=o,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?i.createElement(f,r(r({ref:t},c),{},{components:n})):i.createElement(f,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var m=2;m<a;m++)r[m]=n[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var i=n(7462),o=(n(7294),n(4137));const a={title:"File"},r=void 0,l={unversionedId:"apis/file",id:"apis/file",title:"File",description:"Rules",source:"@site/docs/apis/file.md",sourceDirName:"apis",slug:"/apis/file",permalink:"/ngx-schematics-utilities/apis/file",draft:!1,editUrl:"https://github.com/dsi-hug/ngx-schematics-utilities/edit/main/docs/docs/apis/file.md",tags:[],version:"current",frontMatter:{title:"File"},sidebar:"docs",previous:{title:"Core",permalink:"/ngx-schematics-utilities/apis/core"},next:{title:"Angular",permalink:"/ngx-schematics-utilities/apis/angular"}},s={},m=[{value:"Rules",id:"rules",level:2},{value:"<code>deployFiles</code>",id:"deployfiles",level:3},{value:"<code>deleteFiles</code>",id:"deletefiles",level:3},{value:"<code>createOrUpdateFile</code>",id:"createorupdatefile",level:3},{value:"<code>downloadFile</code>",id:"downloadfile",level:3},{value:"<code>replaceInFile</code>",id:"replaceinfile",level:3},{value:"<code>addImportToFile</code>",id:"addimporttofile",level:3},{value:"<code>modifyImportInFile</code>",id:"modifyimportinfile",level:3},{value:"<code>removeImportFromFile</code>",id:"removeimportfromfile",level:3},{value:"<code>modifyJsonFile</code>",id:"modifyjsonfile",level:3},{value:"<code>removeFromJsonFile</code>",id:"removefromjsonfile",level:3},{value:"Helpers",id:"helpers",level:2},{value:"<code>serializeToJson</code>",id:"serializetojson",level:3},{value:"<code>getTsSourceFile</code>",id:"gettssourcefile",level:3},{value:"<code>commitChanges</code>",id:"commitchanges",level:3}],c={toc:m};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"rules"},"Rules"),(0,o.kt)("h3",{id:"deployfiles"},(0,o.kt)("inlineCode",{parentName:"h3"},"deployFiles")),(0,o.kt)("p",null,"Deploys assets files and optionally applies computation to them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7,10,13,16}","{7,10,13,16}":!0},"import { deployFiles, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // By default: deploy schematic `./files` folder into project root folder\n    deployFiles(),\n\n    // Use defaults but also apply computation to `*.template` files\n    deployFiles(options),\n\n    // Use a different source folder\n    deployFiles(undefined, './my-files'),\n\n    // Use a different destination folder\n    deployFiles(undefined, './files', './my-dest-folder'),\n  ]);\n")),(0,o.kt)("h3",{id:"deletefiles"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteFiles")),(0,o.kt)("p",null,"Deletes a collection of files or folders"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6-9,12}","{6-9,12}":!0},"import { deleteFiles, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    deleteFiles([\n      'src/assets/.gitkeep',\n      'src/app/app.component.spec.ts'\n    ]),\n\n    // Folder deletion needs to be forced\n    deleteFiles(['src'], true)\n  ]);\n")),(0,o.kt)("h3",{id:"createorupdatefile"},(0,o.kt)("inlineCode",{parentName:"h3"},"createOrUpdateFile")),(0,o.kt)("p",null,"Creates or updates a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { createOrUpdateFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    createOrUpdateFile('README.md', 'My readme content')\n  ]);\n")),(0,o.kt)("h3",{id:"downloadfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"downloadFile")),(0,o.kt)("p",null,"Downloads a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{9-12}","{9-12}":!0},"import { downloadFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { chain, Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    (): Rule => {\n      const sizes = ['72', '96', '128', '144', '152', '192', '384', '512'];\n      return chain(\n        sizes.map(size => downloadFile(\n          `https://my-cdn.com/icons/icon-${size}x${size}.png`,\n          `src/assets/icons/icon-${size}x${size}.png`\n        ))\n      );\n    }\n  ]);\n")),(0,o.kt)("h3",{id:"replaceinfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"replaceInFile")),(0,o.kt)("p",null,"Replaces text in a file, using a regular expression or a search string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { replaceInFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    replaceInFile('.editorconfig', /(indent_size = )(.*)/gm, '$14')\n  ]);\n")),(0,o.kt)("h3",{id:"addimporttofile"},(0,o.kt)("inlineCode",{parentName:"h3"},"addImportToFile")),(0,o.kt)("p",null,"Adds an import to a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7,10}","{7,10}":!0},"import { addImportToFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // ES format : `import { environment } from './environments/environment';`\n    addImportToFile('src/main.ts', 'environment', './environments/environment'),\n\n    // Default format : `import packageJson from 'package.json';`\n    addImportToFile('src/main.ts', 'packageJson', 'package.json', true)\n  ]);\n")),(0,o.kt)("h3",{id:"modifyimportinfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"modifyImportInFile")),(0,o.kt)("p",null,"Modifies or removes an import inside a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7,10}","{7,10}":!0},"import { modifyImportInFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // Rename an import\n    modifyImportInFile('src/main.ts', 'name', 'newName', 'src/my-file');\n\n    // Remove an import\n    modifyImportInFile('src/main.ts', 'environment', undefined, 'src/environments/environment');\n  ]);\n")),(0,o.kt)("h3",{id:"removeimportfromfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeImportFromFile")),(0,o.kt)("p",null,"Removes an import inside a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { modifyImportInFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    removeImportFromFile('src/main.ts', 'environment', 'src/environments/environment');\n  ]);\n")),(0,o.kt)("h3",{id:"modifyjsonfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"modifyJsonFile")),(0,o.kt)("p",null,"Adds, modifies or removes an element in a JSON file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7,10,13}","{7,10,13}":!0},"import { modifyJsonFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // Add or update an element\n    modifyJsonFile('tsconfig.json', ['compilerOptions', 'emitDecoratorMetadata'], true),\n\n    // Remove an element\n    modifyJsonFile('tsconfig.json', ['compilerOptions', 'strict'], undefined),\n\n    // Add an element at the beginning\n    modifyJsonFile('tsconfig.json', ['extends'], './my-tsconfig.json', () => 0)\n  ]);\n")),(0,o.kt)("h3",{id:"removefromjsonfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeFromJsonFile")),(0,o.kt)("p",null,"Removes an element inside a JSON file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { removeFromJsonFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    removeFromJsonFile('package.json', ['scripts', 'start'])\n  ]);\n")),(0,o.kt)("h2",{id:"helpers"},"Helpers"),(0,o.kt)("h3",{id:"serializetojson"},(0,o.kt)("inlineCode",{parentName:"h3"},"serializeToJson")),(0,o.kt)("p",null,"Converts a JavaScript value to a JavaScript Object Notation (JSON) string."),(0,o.kt)("admonition",{title:"Note",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Uses a default indentation of 2.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8}","{8}":!0},"import { serializeToJson, schematic } from '@hug/ngx-schematics-utilities';\nimport { chain, Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    (): Rule => {\n      const data = { key: 'value' };\n      const str = serializeToJson(data);\n      ...\n    }\n  ]);\n")),(0,o.kt)("h3",{id:"gettssourcefile"},(0,o.kt)("inlineCode",{parentName:"h3"},"getTsSourceFile")),(0,o.kt)("p",null,"Gets the source of a TypeScript file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},"import { getTsSourceFile, schematic } from '@hug/ngx-schematics-utilities';\nimport { Rule, Tree } from '@angular-devkit/schematics';\n\nexport const myRule = (filePath: string): Rule =>\n  (tree: Tree): void => {\n    const sourceFile = getTsSourceFile(tree, filePath);\n    ...\n  };\n")),(0,o.kt)("h3",{id:"commitchanges"},(0,o.kt)("inlineCode",{parentName:"h3"},"commitChanges")),(0,o.kt)("p",null,"Applies changes on a file inside the current schematic's project tree."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"import { commitChanges } from '@hug/ngx-schematics-utilities';\nimport { Rule, Tree } from '@angular-devkit/schematics';\n\nexport const myRule = (filePath: string): Rule =>\n  (tree: Tree): void => {\n    ...\n    commitChanges(tree, filePath, changes);\n  };\n")))}p.isMDXComponent=!0}}]);