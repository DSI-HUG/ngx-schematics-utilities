"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[562],{8082:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var t=i(1085),s=i(1184);const o={title:"File"},l=void 0,r={id:"apis/file",title:"File",description:"Rules",source:"@site/docs/apis/file.md",sourceDirName:"apis",slug:"/apis/file",permalink:"/ngx-schematics-utilities/apis/file",draft:!1,unlisted:!1,editUrl:"https://github.com/dsi-hug/ngx-schematics-utilities/edit/main/docs/docs/apis/file.md",tags:[],version:"current",frontMatter:{title:"File"},sidebar:"docs",previous:{title:"Core",permalink:"/ngx-schematics-utilities/apis/core"},next:{title:"Angular",permalink:"/ngx-schematics-utilities/apis/angular"}},c={},a=[{value:"Rules",id:"rules",level:2},{value:"<code>deployFiles</code>",id:"deployfiles",level:3},{value:"<code>deleteFiles</code>",id:"deletefiles",level:3},{value:"<code>renameFile</code>",id:"renamefile",level:3},{value:"<code>createOrUpdateFile</code>",id:"createorupdatefile",level:3},{value:"<code>downloadFile</code>",id:"downloadfile",level:3},{value:"<code>replaceInFile</code>",id:"replaceinfile",level:3},{value:"<code>addImportToFile</code>",id:"addimporttofile",level:3},{value:"<code>modifyImportInFile</code>",id:"modifyimportinfile",level:3},{value:"<code>removeImportFromFile</code>",id:"removeimportfromfile",level:3},{value:"<code>modifyJsonFile</code>",id:"modifyjsonfile",level:3},{value:"<code>removeFromJsonFile</code>",id:"removefromjsonfile",level:3},{value:"Helpers",id:"helpers",level:2},{value:"<code>serializeToJson</code>",id:"serializetojson",level:3},{value:"<code>getTsSourceFile</code>",id:"gettssourcefile",level:3},{value:"<code>commitChanges</code>",id:"commitchanges",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,t.jsx)(n.h3,{id:"deployfiles",children:(0,t.jsx)(n.code,{children:"deployFiles"})}),"\n",(0,t.jsx)(n.p,{children:"Deploys assets files and optionally applies computation to them."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{7,10,13,16,20}",children:"import { deployFiles, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // By default: deploy schematic `./files` folder into project root folder\n    deployFiles(),\n\n    // Use defaults but also apply computation to `*.template` files\n    deployFiles(options),\n\n    // Use a different source folder\n    deployFiles(undefined, './my-files'),\n\n    // Use a different destination folder\n    deployFiles(undefined, './files', './my-dest-folder'),\n\n    // Using chainable\n    workspace()\n      .deployFiles()\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deletefiles",children:(0,t.jsx)(n.code,{children:"deleteFiles"})}),"\n",(0,t.jsx)(n.p,{children:"Deletes a collection of files or folders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6-9,12,16}",children:"import { deleteFiles, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    deleteFiles([\n      'src/assets/.gitkeep',\n      'src/app/app.component.spec.ts'\n    ]),\n\n    // Folder deletion needs to be forced\n    deleteFiles(['src'], true),\n\n    // Using chainable\n    workspace()\n      .deleteFiles(['file.txt'])\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"renamefile",children:(0,t.jsx)(n.code,{children:"renameFile"})}),"\n",(0,t.jsx)(n.p,{children:"Rename a file"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,10}",children:"import { renameFile, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    renameFile('src/old/a.ts', 'src/new/b.ts'),\n\n    // Using chainable\n    workspace()\n      .renameFile('old.txt', 'new.txt')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"createorupdatefile",children:(0,t.jsx)(n.code,{children:"createOrUpdateFile"})}),"\n",(0,t.jsx)(n.p,{children:"Creates or updates a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,10}",children:"import { createOrUpdateFile, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    createOrUpdateFile('README.md', 'My readme content'),\n\n    // Using chainable\n    workspace()\n      .createOrUpdateFile('README.md', 'My readme Content')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"downloadfile",children:(0,t.jsx)(n.code,{children:"downloadFile"})}),"\n",(0,t.jsx)(n.p,{children:"Downloads a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{9-12,18}",children:"import { downloadFile, rule, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { chain, Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    rule(() => {\n      const sizes = ['72', '96', '128', '144', '152', '192', '384', '512'];\n      return chain(\n        sizes.map(size => downloadFile(\n          `https://my-cdn.com/icons/icon-${size}x${size}.png`,\n          `src/assets/icons/icon-${size}x${size}.png`\n        ))\n      );\n    }),\n\n    // Using chainable\n    workspace()\n      .downloadFile('https://my-cdn.com/icons/icon.png', './icon.png')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"replaceinfile",children:(0,t.jsx)(n.code,{children:"replaceInFile"})}),"\n",(0,t.jsx)(n.p,{children:"Replaces text in a file, using a regular expression or a search string."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,10}",children:"import { replaceInFile, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    replaceInFile('.editorconfig', /(indent_size = )(.*)/gm, '$14'),\n\n    // Using chainable\n    workspace()\n      .replaceInFile('.editorconfig', /(indent_size = )(.*)/gm, '$14')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"addimporttofile",children:(0,t.jsx)(n.code,{children:"addImportToFile"})}),"\n",(0,t.jsx)(n.p,{children:"Adds an import to a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{7,10,14}",children:"import { addImportToFile, schematic, project } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // ES format : `import { environment } from './environments/environment';`\n    addImportToFile('src/main.ts', 'environment', './environments/environment'),\n\n    // Default format : `import packageJson from 'package.json';`\n    addImportToFile('src/main.ts', 'packageJson', 'package.json', true),\n\n    // Using chainable\n    application(options.project)\n      .addImportToFile('__MAIN__', 'environment', './environments/environment')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"modifyimportinfile",children:(0,t.jsx)(n.code,{children:"modifyImportInFile"})}),"\n",(0,t.jsx)(n.p,{children:"Modifies or removes an import inside a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{7,10,14}",children:"import { modifyImportInFile, schematic, project } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // Rename an import\n    modifyImportInFile('src/main.ts', 'name', 'newName', 'src/my-file'),\n\n    // Remove an import\n    modifyImportInFile('src/main.ts', 'environment', undefined, 'src/environments/environment'),\n\n    // Using chainable\n    project(options.project)\n      .modifyImportInFile('__MAIN__', 'name', 'newName', 'src/my-file')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removeimportfromfile",children:(0,t.jsx)(n.code,{children:"removeImportFromFile"})}),"\n",(0,t.jsx)(n.p,{children:"Removes an import inside a file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,10}",children:"import { modifyImportInFile, schematic, project } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    removeImportFromFile('src/main.ts', 'environment', 'src/environments/environment'),\n\n    // Using chainable\n    project(options.project)\n      .removeImportFromFile('__MAIN__', 'environment', 'src/environments/environment')\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"modifyjsonfile",children:(0,t.jsx)(n.code,{children:"modifyJsonFile"})}),"\n",(0,t.jsx)(n.p,{children:"Adds, modifies or removes an element in a JSON file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{7,10,13,17}",children:"import { modifyJsonFile, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    // Add or update an element\n    modifyJsonFile('tsconfig.json', ['compilerOptions', 'emitDecoratorMetadata'], true),\n\n    // Remove an element\n    modifyJsonFile('tsconfig.json', ['compilerOptions', 'strict'], undefined),\n\n    // Add an element at the beginning\n    modifyJsonFile('tsconfig.json', ['extends'], './my-tsconfig.json', () => 0),\n\n    // Using chainable\n    workspace()\n      .modifyJsonFile('tsconfig.json', ['compilerOptions', 'emitDecoratorMetadata'], true)\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"removefromjsonfile",children:(0,t.jsx)(n.code,{children:"removeFromJsonFile"})}),"\n",(0,t.jsx)(n.p,{children:"Removes an element inside a JSON file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6,10}",children:"import { removeFromJsonFile, schematic, workspace } from '@hug/ngx-schematics-utilities';\nimport { Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    removeFromJsonFile('package.json', ['scripts', 'start']),\n\n    // Using chainable\n    workspace()\n      .removeFromJsonFile('package.json', ['scripts', 'start'])\n      .toRule()\n  ]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"helpers",children:"Helpers"}),"\n",(0,t.jsx)(n.h3,{id:"serializetojson",children:(0,t.jsx)(n.code,{children:"serializeToJson"})}),"\n",(0,t.jsx)(n.p,{children:"Converts a JavaScript value to a JavaScript Object Notation (JSON) string."}),"\n",(0,t.jsx)(n.admonition,{title:"Note",type:"note",children:(0,t.jsx)(n.p,{children:"Uses a default indentation of 2."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{8}",children:"import { serializeToJson, schematic, rule } from '@hug/ngx-schematics-utilities';\nimport { chain, Rule } from '@angular-devkit/schematics';\n\nexport default (options: any): Rule =>\n  schematic('my-schematic', [\n    rule((): Rule => {\n      const data = { key: 'value' };\n      const str = serializeToJson(data);\n      ...\n    })\n  ]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gettssourcefile",children:(0,t.jsx)(n.code,{children:"getTsSourceFile"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the source of a TypeScript file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { getTsSourceFile, schematic, rule } from '@hug/ngx-schematics-utilities';\nimport { Rule, Tree } from '@angular-devkit/schematics';\n\nexport const myRule = (filePath: string): Rule =>\n  rule((tree: Tree): void => {\n    const sourceFile = getTsSourceFile(tree, filePath);\n    ...\n  });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"commitchanges",children:(0,t.jsx)(n.code,{children:"commitChanges"})}),"\n",(0,t.jsx)(n.p,{children:"Applies changes on a file inside the current schematic's project tree."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"{7}",children:"import { commitChanges, rule } from '@hug/ngx-schematics-utilities';\nimport { Rule, Tree } from '@angular-devkit/schematics';\n\nexport const myRule = (filePath: string): Rule =>\n  rule((tree: Tree): void => {\n    ...\n    commitChanges(tree, filePath, changes);\n  });\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1184:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var t=i(4041);const s={},o=t.createContext(s);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);